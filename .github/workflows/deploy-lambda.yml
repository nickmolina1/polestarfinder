name: Deploy Lambdas (staging + prod)
on:
  push:
    branches: [dev, main]

env:
  PYTHON_VERSION: "3.12"
  BUILD_DIR: "build"
  AWS_REGION: "us-east-1"

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repo
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Build artifact (Linux wheels)
      run: |
        rm -rf $BUILD_DIR artifact.zip
        mkdir -p $BUILD_DIR
        pip install --upgrade pip
        pip install -r requirements.txt -t $BUILD_DIR
        cp -R jobs scraper database $BUILD_DIR/
        cd $BUILD_DIR && zip -r ../artifact.zip .

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

   
    # STAGING (dev) — deploy both lambdas, no CF invalidate
    - name: Deploy STAGING
      if: github.ref == 'refs/heads/dev'
      run: |
        aws lambda update-function-code --function-name ${{ secrets.LAMBDA_STAGING_SCRAPER }} --zip-file fileb://artifact.zip
        aws lambda update-function-code --function-name ${{ secrets.LAMBDA_STAGING_LOADER  }} --zip-file fileb://artifact.zip

    # PROD (main) — deploy both lambdas + JSON-only invalidate
    - name: Deploy PROD
      if: github.ref == 'refs/heads/main'
      run: |
        aws lambda update-function-code --function-name ${{ secrets.LAMBDA_PROD_SCRAPER }} --zip-file fileb://artifact.zip
        aws lambda update-function-code --function-name ${{ secrets.LAMBDA_PROD_LOADER  }} --zip-file fileb://artifact.zip

    - name: Invalidate PROD JSON
      if: github.ref == 'refs/heads/main'
      run: |
        aws cloudfront create-invalidation \
          --distribution-id ${{ secrets.PROD_CF_ID }} \
          --paths "/data/vehicles.json"